licenseplate-backend/
├── pom.xml                         // File cấu hình Maven
├── README.md                       // Tài liệu dự án
└── src
    ├── main
    │   ├── java
    │   │   └── com
    │   │       └── example
    │   │           └── licenseplate
    │   │               ├── LicensePlateApplication.java      // Main ứng dụng Spring Boot
    │   │               ├── config
    │   │               │   └── SecurityConfig.java             // Cấu hình bảo mật (JWT, CORS,…)
    │   │               ├── controller
    │   │               │   ├── AuthController.java             // API đăng nhập/đăng ký (JWT)
    │   │               │   ├── AccountController.java            // (CRUD cho tài khoản, lịch sử đăng nhập, …)
    │   │               │   ├── PersonController.java             // CRUD cho thông tin người dân
    │   │               │   ├── VehicleController.java            // CRUD cho xe: Car & Motorcycle (em Phú)
    │   │               │   ├── ViolationController.java          // CRUD cho vi phạm (cho xe hơi và xe máy)
    │   │               │   └── ScanLogController.java            // CRUD cho lịch sử quét (car_scan_logs, motorcycle_scan_logs)
    │   │               ├── dto
    │   │               │   ├── JwtResponse.java                // DTO trả về token & thông tin tài khoản
    │   │               │   ├── SignInRequest.java              // DTO đăng nhập
    │   │               │   ├── SignUpRequest.java              // DTO đăng ký tài khoản (USER)
    │   │               │   ├── AdminSignUpRequest.java         // DTO đăng ký admin
    │   │               │   └── AdminUpdateRequest.java         // DTO cập nhật admin
    │   │               ├── filter
    │   │               │   ├── JwtAuthenticationFilter.java    // Bộ lọc JWT cho request
    │   │               │   └── WhitelistFilter.java            // Bộ lọc URL công khai
    │   │               ├── model
    │   │               │   ├── ERole.java                      // Enum vai trò (USER, ADMIN, MODERATOR)
    │   │               │   ├── Account.java                    // Entity ánh xạ bảng account
    │   │               │   ├── LoginHistory.java               // Entity ánh xạ bảng login_history
    │   │               │   ├── Person.java                     // Entity ánh xạ bảng person
    │   │               │   ├── Gender.java                     // Enum giới tính (MALE, FEMALE)
    │   │               │   ├── Car.java                        // Entity ánh xạ bảng car(Phú)
    │   │               │   ├── Motorcycle.java                 // Entity ánh xạ bảng motorcycle(Phú)
    │   │               │   ├── FaceData.java                   // Entity ánh xạ bảng face_data
    │   │               │   ├── CarViolation.java               // Entity ánh xạ bảng car_violations
    │   │               │   ├── MotorcycleViolation.java        // Entity ánh xạ bảng motorcycle_violations
    │   │               │   ├── CarScanLog.java                 // Entity ánh xạ bảng car_scan_logs
    │   │               │   └── MotorcycleScanLog.java          // Entity ánh xạ bảng motorcycle_scan_logs
    │   │               ├── repository
    │   │               │   ├── AccountRepository.java          // Repository cho account
    │   │               │   ├── LoginHistoryRepository.java       // Repository cho login_history
    │   │               │   ├── PersonRepository.java           // Repository cho person
    │   │               │   ├── CarRepository.java              // Repository cho car(Phú)
    │   │               │   ├── Motorcycl    package com.example.licenseplate.controller;
    
    import com.example.licenseplate.model.Car;
    import com.example.licenseplate.model.Motorcycle;
    import com.example.licenseplate.service.VehicleService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;
    
    import java.util.List;
    
    @RestController
    @RequestMapping("/api/vehicles")
    public class VehicleController {
    
        @Autowired
        private VehicleService vehicleService;
    
        // -------------------- Các API cho xe hơi --------------------
    
        // Tạo mới một xe hơi
        @PostMapping("/cars")
        public ResponseEntity<Car> createCar(@RequestBody Car car) {
            Car createdCar = vehicleService.createCar(car);
            return ResponseEntity.ok(createdCar);
        }
    
        // Lấy danh sách tất cả xe hơi
        @GetMapping("/cars")
        public ResponseEntity<List<Car>> getAllCars() {
            List<Car> cars = vehicleService.getAllCars();
            return ResponseEntity.ok(cars);
        }
    
        // Lấy thông tin xe hơi theo ID
        @GetMapping("/cars/{id}")
        public ResponseEntity<Car> getCarById(@PathVariable Long id) {
            Car car = vehicleService.getCarById(id);
            return ResponseEntity.ok(car);
        }
    
        // Cập nhật thông tin xe hơi
        @PutMapping("/cars/{id}")
        public ResponseEntity<Car> updateCar(@PathVariable Long id, @RequestBody Car carDetails) {
            Car updatedCar = vehicleService.updateCar(id, carDetails);
            return ResponseEntity.ok(updatedCar);
        }
    
        // Xóa xe hơi
        @DeleteMapping("/cars/{id}")
        public ResponseEntity<Void> deleteCar(@PathVariable Long id) {
            vehicleService.deleteCar(id);
            return ResponseEntity.noContent().build();
        }
    
        // -------------------- Các API cho xe máy --------------------
    
        // Tạo mới một xe máy
        @PostMapping("/motorcycles")
        public ResponseEntity<Motorcycle> createMotorcycle(@RequestBody Motorcycle motorcycle) {
            Motorcycle createdMotorcycle = vehicleService.createMotorcycle(motorcycle);
            return ResponseEntity.ok(createdMotorcycle);
        }
    
        // Lấy danh sách tất cả xe máy
        @GetMapping("/motorcycles")
        public ResponseEntity<List<Motorcycle>> getAllMotorcycles() {
            List<Motorcycle> motorcycles = vehicleService.getAllMotorcycles();
            return ResponseEntity.ok(motorcycles);
        }
    
        // Lấy thông tin xe máy theo ID
        @GetMapping("/motorcycles/{id}")
        public ResponseEntity<Motorcycle> getMotorcycleById(@PathVariable Long id) {
            Motorcycle motorcycle = vehicleService.getMotorcycleById(id);
            return ResponseEntity.ok(motorcycle);
        }
    
        // Cập nhật thông tin xe máy
        @PutMapping("/motorcycles/{id}")
        public ResponseEntity<Motorcycle> updateMotorcycle(@PathVariable Long id, @RequestBody Motorcycle motorcycleDetails) {
            Motorcycle updatedMotorcycle = vehicleService.updateMotorcycle(id, motorcycleDetails);
            return ResponseEntity.ok(updatedMotorcycle);
        }
    
        // Xóa xe máy
        @DeleteMapping("/motorcycles/{id}")
        public ResponseEntity<Void> deleteMotorcycle(@PathVariable Long id) {
            vehicleService.deleteMotorcycle(id);
            return ResponseEntity.noContent().build();
        }
    }eRepository.java       // Repository cho motorcycle(Phú)
    │   │               │   ├── FaceDataRepository.java         // Repository cho face_data
    │   │               │   ├── CarViolationRepository.java     // Repository cho car_violations
    │   │               │   ├── MotorcycleViolationRepository.java// Repository cho motorcycle_violations
    │   │               │   ├── CarScanLogRepository.java         // Repository cho car_scan_logs
    │   │               │   └── MotorcycleScanLogRepository.java  // Repository cho motorcycle_scan_logs
    │   │               ├── service
    │   │               │   ├── AuthEntryPointJwt.java          // Xử lý lỗi xác thực
    │   │               │   ├── UserDetailsImpl.java            // Cài đặt UserDetails
    │   │               │   ├── UserDetailsServiceImpl.java     // Tải thông tin tài khoản từ DB
    │   │               │   ├── AccountService.java             // Nghiệp vụ CRUD cho account
    │   │               │   ├── PersonService.java              // Nghiệp vụ CRUD cho person
    │   │               │   ├── VehicleService.java             // Nghiệp vụ CRUD cho xe (Car & Motorcycle)(Phú)
    │   │               │   ├── ViolationService.java           // Nghiệp vụ CRUD cho vi phạm
    │   │               │   └── ScanLogService.java             // Nghiệp vụ CRUD cho lịch sử quét
    │   │               └── util
    │   │                   └── JwtUtil.java                    // Tiện ích tạo & xác thực JWT
    │   └── resources
    │       └── application.yaml                        // Cấu hình ứng dụng (DB, jwt, …)
    └── test
        └── java
            └── com
                └── example
                    └── licenseplate
                        └── (Các file test)
